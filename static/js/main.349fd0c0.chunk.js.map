{"version":3,"sources":["actions/index.js","containers/search_bar.js","components/chart.js","components/google-map.js","containers/weather_list.js","components/app.js","reducers/index.js","reducers/reducer-weather.js","index.js"],"names":["BASE_URL","SearchBar","props","onInputChange","event","setState","term","target","value","onFormSubmit","preventDefault","fetchWeather","state","onSubmit","this","className","placeholder","onChange","type","Component","connect","city","url","payload","axios","get","height","width","data","color","_","round","parseFloat","sum","length","units","google","window","GoogleMap","maps","Map","refs","map","zoom","center","lat","lng","lon","ref","WeatherList","cityData","undefined","name","temps","list","weather","main","temp","toFixed","pressures","pressure","humidities","humidity","coord","key","renderWeather","App","Fragment","rootReducer","combineReducers","action","createStoreWithMiddleware","createStore","reducers","applyMiddleware","ReduxPromise","ReactDOM","render","store","document","querySelector"],"mappings":"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","file":"static/js/main.349fd0c0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = \"e80d1362c813f6db588dc6f071cdda26\";\r\nconst BASE_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\r\n\r\nexport const FETCH_WEATHER = \"FETCH_WEATHER\";\r\n\r\nexport function fetchWeather(city) {\r\n  const url = `${BASE_URL}&q=${city},in`;\r\n  const request = axios.get(url);\r\n  return {\r\n    type: FETCH_WEATHER,\r\n    payload: request,\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchWeather } from \"../actions/index\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { term: \"\" };\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({ term: event.target.value });\r\n  };\r\n\r\n  onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.fetchWeather(this.state.term);\r\n    this.setState({ term: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onFormSubmit} className=\"input-group\">\r\n        <input\r\n          placeholder=\"Get a five days forecast of your favourite cities\"\r\n          className=\"form-control\"\r\n          value={this.state.term}\r\n          onChange={this.onInputChange}\r\n        />\r\n        <span className=\"input-group-btn\">\r\n          <button type=\"submit\" className=\"btn btn-secondary\">\r\n            Submit\r\n          </button>\r\n        </span>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { fetchWeather: fetchWeather })(SearchBar);\r\n","import _ from \"lodash\";\r\nimport React from \"react\";\r\nimport {\r\n  Sparklines,\r\n  SparklinesLine,\r\n  SparklinesReferenceLine,\r\n} from \"react-sparklines\";\r\n\r\nfunction average(data) {\r\n  return _.round(parseFloat(_.sum(data)) / data.length);\r\n}\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"charts\">\r\n      <Sparklines height={120} width={180} data={props.data}>\r\n        <SparklinesLine color={props.color} />\r\n        <SparklinesReferenceLine type=\"avg\" />\r\n      </Sparklines>\r\n      <div>\r\n        {average(props.data)} {props.units}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nconst google = window.google;\r\n\r\nclass GoogleMap extends Component {\r\n  componentDidMount() {\r\n    new google.maps.Map(this.refs.map, {\r\n      zoom: 12,\r\n      center: {\r\n        lat: this.props.lat,\r\n        lng: this.props.lon,\r\n      },\r\n    });\r\n  }\r\n  render() {\r\n    return <div ref=\"map\" />;\r\n  }\r\n}\r\n\r\nexport default GoogleMap;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Chart from \"../components/chart\";\r\nimport GoogleMap from \"../components/google-map\";\r\n\r\nclass WeatherList extends Component {\r\n  renderWeather(cityData) {\r\n    if (cityData === undefined) {\r\n      return null;\r\n    }\r\n    const name = cityData.city.name;\r\n    const temps = cityData.list.map((weather) =>\r\n      parseFloat((weather.main.temp - 273).toFixed(2))\r\n    );\r\n    const pressures = cityData.list.map((weather) => weather.main.pressure);\r\n    const humidities = cityData.list.map((weather) => weather.main.humidity);\r\n    const { lon, lat } = cityData.city.coord;\r\n\r\n    return (\r\n      <tr key={name}>\r\n        <td>\r\n          <GoogleMap lon={lon} lat={lat} />\r\n        </td>\r\n        <td>\r\n          <Chart data={temps} color=\"orange\" units=\"&#8451;\" />\r\n        </td>\r\n        <td>\r\n          <Chart data={humidities} color=\"blue\" units=\"%\" />\r\n        </td>\r\n        <td>\r\n          <Chart data={pressures} color=\"green\" units=\"hPa\" />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\" table-responsive\">\r\n        <table className=\"table table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>Google Map</th>\r\n              <th>Temperature (&#8451;)</th>\r\n              <th>Humidity (%)</th>\r\n              <th>Pressure (hPa)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.props.weather.map(this.renderWeather)}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ weather }) {\r\n  return { weather };\r\n}\r\nexport default connect(mapStateToProps)(WeatherList);\r\n","import React, { Component } from \"react\";\nimport SearchBar from \"../containers/search_bar\";\nimport WeatherList from \"../containers/weather_list\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <SearchBar />\n        <WeatherList />\n      </React.Fragment>\n    );\n  }\n}\n","import { combineReducers } from \"redux\";\nimport WeatherReducer from \"./reducer-weather\";\n\nconst rootReducer = combineReducers({\n  weather: WeatherReducer,\n});\n\nexport default rootReducer;\n","import { FETCH_WEATHER } from \"../actions/index\";\r\n\r\nexport default function (state = [], action) {\r\n  switch (action.type) {\r\n    case FETCH_WEATHER:\r\n      return [action.payload.data, ...state];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ReduxPromise from \"redux-promise\";\nimport App from \"./components/app\";\nimport reducers from \"./reducers\";\n\nconst createStoreWithMiddleware = createStore(\n  reducers,\n  applyMiddleware(ReduxPromise)\n);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware}>\n    <App />\n  </Provider>,\n  document.querySelector(\".container-fluid\")\n);\n"],"sourceRoot":""}